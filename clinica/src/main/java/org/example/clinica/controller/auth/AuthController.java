package org.example.clinica.controller.auth;

import lombok.RequiredArgsConstructor;
import org.example.clinica.model.postgres.Usuario;
import org.example.clinica.service.JwtService;
import org.example.clinica.service.UsuarioService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
@RequiredArgsConstructor
public class AuthController {

    private final UsuarioService usuarioService;
    private final JwtService jwtService;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;

    /**
     * Endpoint para REGISTRAR un nuevo usuario (Médico/Enfermero/Admin).
     * Ruta: /api/auth/register
     */
    @PostMapping("/register")
    public ResponseEntity<String> register(@RequestBody AuthRequest request) {
        // Validación de datos esenciales
        if (request.getEmail() == null || request.getPassword() == null || request.getRol() == null) {
            return ResponseEntity.badRequest().body("Faltan datos obligatorios para el registro (email, password, rol).");
        }

        // 1. Encriptar contraseña antes de guardar (CRUCIAL para Spring Security)
        String encodedPassword = passwordEncoder.encode(request.getPassword());

        Usuario nuevoUsuario = new Usuario(
                null, // ID generated by Postgres
                request.getNombre(),
                request.getApellido(),
                request.getEmail(),
                encodedPassword,
                request.getRol()
        );

        // 2. Guardar en PostgreSQL
        usuarioService.guardar(nuevoUsuario);

        // 3. Generar token
        String token = jwtService.generateToken(nuevoUsuario);

        return ResponseEntity.ok(token);
    }

    /**
     * Endpoint para INICIAR SESIÓN y obtener el JWT.
     * Ruta: /api/auth/login
     */
    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody AuthRequest request) {
        // 1. Intentar autenticar. Si es exitoso, la ejecución continúa. Si falla, lanza excepción.
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        request.getEmail(),
                        request.getPassword()
                )
        );

        // 2. Si la autenticación fue exitosa, buscamos el usuario (de Postgres) y generamos el token
        Usuario usuario = usuarioService.buscarPorEmail(request.getEmail())
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado después de autenticación exitosa."));

        String token = jwtService.generateToken(usuario);

        return ResponseEntity.ok(token);
    }
}